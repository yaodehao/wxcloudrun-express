<template><div><v-toolbar class="mx-auto mb-3" color="transparent" dense elevation="0"  v-if="crudToolbar">	 <v-spacer></v-spacer>	<v-btn-toggle dense shaped>	<v-btn v-if="cardmode" @click="cardmode=false">列表风格</v-btn>	<v-btn v-else          @click="cardmode=true" >卡片风格</v-btn>		<v-btn @click="init()"       >刷新</v-btn>	<v-btn @click="newItem()"    >新增</v-btn>	<v-btn onclick="app.ClosePage()">关闭</v-btn></v-btn-toggle><v-spacer></v-spacer>		<v-icon color="primary" @click="crudPanel=!crudPanel" color="primary">mdi-menu</v-icon></v-toolbar><v-alert v-model="crudPanel" border="top"  colored-border color="warning" elevation="2" align="start"><v-row dense><v-col cols="12" sm="12" md="12" lg="6"><v-text-field v-model="search" clearable hide-details outlined dense label="数据过滤（查找），请输入关键字：" ></v-col><!-- 模糊搜索临时取消<v-col cols="12" sm="6" md="4" lg="3"><v-text-field v-model="searchdb" clearable hide-details outlined dense label="模糊搜索" append-icon="mdi-transfer-down" @click:append="alert('s')"></v-col>--></v-row></v-alert>		<!--操作栏panel sheet --><!--  v-data-iterator Card风格------ --><v-data-iterator v-if="cardmode" :items="d_items" :items-per-page.sync="itemsPerPage" :page="page" :search="search" hide-default-footer><template v-slot:default="props">	<v-card max-width="600" heigh="600" class="mx-auto ma-5"  elevation="10"> <v-toolbar :color="d_attr.tbcolor" dark dense> <v-toolbar-title>{{d_attr.title}}</v-toolbar-title> <v-spacer></v-spacer>
          <v-menu bottom left>
            <template v-slot:activator="{ on }"><v-btn dark icon  v-on="on" ><v-icon>mdi-dots-vertical</v-icon></v-btn></template>
            <v-list>
                <v-list-item @click="d_attr.tbcolor='cyan'">默认</v-list-item>
                <v-list-item @click="d_attr.tbcolor='#1565C0'">蓝色</v-list-item>
                <v-list-item @click="d_attr.tbcolor='#E53935'">红色</v-list-item>
                <v-list-item @click="d_attr.tbcolor='#EF6C00'">橙色</v-list-item>
				<v-list-item @click="d_attr.tbcolor='#37474F'">灰色</v-list-item>
				<v-list-item @click="d_attr.tbcolor='#6D4C41'">棕色</v-list-item>
				<v-list-item @click="d_attr.tbcolor='#2E7D32'">绿色</v-list-item>
				<v-divider></v-divider>
				<v-list-item @click="newItem()"><v-list-item-title>新增数据</v-list-item-title></v-list-item>
              <v-divider></v-divider>
               <v-list-item @click="init()">刷新数据</v-list-item-title></v-list-item>
            </v-list>
          </v-menu>
</v-toolbar><v-list three-line > 	<template v-for="(item, index) in props.items"> 	<v-divider v-if="index>0"  inset></v-divider> 	<v-list-item :key="item.ID"  @click="editItem(item)" > 	    <v-avatar :color="avaColor[index % 5]" size="60"><span class="white--text subtitle-1">{{item.mem_name.substr(0,3)}}</span>    </v-avatar>&nbsp; 	<v-list-item-content > <v-list-item-title v-html="item.msg" ></v-list-item-title> <v-list-item-subtitle v-html="item.mem_name+'@'+item.addtime"></v-list-item-subtitle> </v-list-item-content></v-list-item></template></v-list></v-card></template><template v-slot:footer><v-row v-if="crudPager" class="mx-1 mt-3" align="center" justify="center">	<v-btn-toggle  dense shaped>	<v-btn small @click="formerPage">上页</v-btn>	<v-btn small>P{{page}}/共{{numberOfPages}}</v-btn>	<v-menu offset-y  class="mx-0">		<template v-slot:activator="{on}"><v-btn small dark text color="primary" v-on="on">每页{{itemsPerPage}}</v-btn></template>		<v-list><v-list-item v-for="(number,index) in itemsPerPageArray" :key="index" @click="updateItemsPerPage(number)">		<v-list-item-title class="ma-0 pa-0">{{number}}</v-list-item-title></v-list-item></v-list>	</v-menu>			<v-btn small  @click="moreItem()" >更多</v-btn>	<v-btn small  @click="nextPage">下页</v-btn></v-btn-toggle> 	<v-btn small v-if="crudToolbar" block depressed class="my-6 body-1 grey lighten-1 white--text"  onclick="app.ClosePage()" >	<v-icon>mdi-keyboard-return</v-icon><v-spacer></v-spacer>关闭本页<v-spacer></v-spacer><v-icon>mdi-keyboard-return</v-icon></v-btn>	</v-row></template><!-- data-iterator页脚插件---------- --></v-data-iterator><!--  v-data-table 列表风格 --><v-data-table v-if="cardmode==false" :headers="headers" :items="d_items" :items-per-page.sync="itemsPerPage" :page="page" :search="search" class="elevation-2" style="white-space:nowrap;overflow:hidden;" mobile-breakpoint="100" >	<template v-slot:item.action="{item }"><v-icon small @click="editItem(item)" color="primary">mdi-lead-pencil</v-icon></template>	<template v-slot:no-data><v-btn color="primary" @click="newItem('')" small>无数据。点击新增记录</v-btn></template></v-data-table><v-dialog v-model="EditDialog" fullscreen scrollable persistent><!-- 编辑的对话框----------dialog --><v-card ><v-card-title class="headline" style="background:#F1FAFA">	<v-btn rounded color="primary" dark @click="close()" small><v-icon>mdi-keyboard-return</v-icon>返回</v-btn><v-spacer></v-spacer>	<v-btn v-if="(editedIndex>-1)&&editable" rounded small color="primary" dark @click="deleteItem(d_items[editedIndex]);"><v-icon>mdi-delete</v-icon>删除</v-btn><v-spacer></v-spacer>	 	<v-btn v-if="crudToolbar==false"  rounded color="primary" dark @click="close()" small><v-icon>mdi-keyboard-return</v-icon>返回</v-btn>	<v-btn v-else-if="editable" rounded color="primary" dark @click="saveData()" small><v-icon>mdi-alert-circle</v-icon>保存[{{editedItem.ID}}]</v-btn>	<v-btn v-else               rounded color="primary" dark @click="editable=true" small><v-icon>mdi-alert-circle</v-icon>开始编辑</v-btn></v-card-title><v-card-text><v-row><v-col cols=6><v-text-field v-model="editedItem.ID" label="" type="number" dense disabled prefix="ID编码："></v-text-field></v-col><v-col cols=6><v-text-field v-model="editedItem.d_type" label="" type="text" dense disabled prefix="类别编码："></v-text-field></v-col><v-col cols=12>	    <v-textarea v-model="editedItem.mem_name"      label="姓名：" outlined auto-grow rows=2 readonly></v-textarea>    <v-textarea v-model="editedItem.msg"   label="意见：" outlined auto-grow readonly></v-textarea>    <v-textarea v-model="editedItem.addtime"   label="时间：" outlined auto-grow readonly></v-textarea></v-col>    </v-row>
<v-btn  small block depressed class="body-1 light-green lighten-2 white--text my-4"  @click="close()"><v-icon>mdi-keyboard-return</v-icon><v-spacer></v-spacer>返回<v-spacer></v-spacer><v-icon>mdi-keyboard-return</v-icon></v-btn>

</v-card-text></v-card></v-dialog><!-- 编辑的对话框 --></div></template><script>module.exports={data(){return {		varWin:{}, //H5的window全局变量 	itemsPerPageArray: [5, 10, 15],	search:'',searchdb:'',	filter: {},	sortDesc: false,	page: 1,	itemsPerPage: 5,	sortBy:'ID',		EditDialog: false,	FlowDialog: false,	editable:false,	cardmode:true,	addcount:0, //新记录，ID默认值	editedIndex: -1,	editedItem: {},	d_items:[],		ID0:0,ID1:0, //最小ID	crudPager:true,  //页码  	crudToolbar:true, //工具栏  	crudPanel:false,  //工具栏下面的panel	queryObj:{},      //url参数	d_type:'',			b_folder:false,//目录（文件夹）					d_attr:{tbcolor:'orange',title:'阅签情况'},	url_r:'/common/data_r.asp?sn='+sn,	url_s:'/common/data_s.asp',	url_d:'/common/data_d.asp',	test_data:'test_data.html',	parm_r:{r_page:1,r_rows:20,r_order:'ID$desc',r_searchdb:'',r_where:'',r_MaxID:0,r_MinID:0,				r_tab:'cm_readed',r_fd:'ID$mem_name$msg$TopTab$TopRow$d_type$addtime',r_fd0:'d_type$TopRow',r_fd1:'$mem_name$msg$addtime$TopTab',},	defaultItem:{ID:-1,d_type:'',mem_name:'',msg:'',addtime:'',d_pic:'',TopTab:'',TopRow:''}, 	headers: [		{text: '操作',value: 'action',sortable: false,align:'center',divider:true,width:'50px' },		{text: 'ID', value: 'ID', align:'center', sortable: false,divider:true,width:'50px'},		{text: '姓名',value: 'mem_name',divider:true,align:'start'},		{text: '意见',value: 'msg' ,divider:true,align:'start'},		{text: '时间',value: 'addtime',divider:true,align:'start' }, 		], 	avaColor:['orange','indigo','success','teal','error'], 	 	tmpMsg:'已阅。', } },created(){app.tabobj[app.tabobj.length -1]=this;   	this.queryObj=qs.parse(''); 	if( this.queryObj.title){this.d_attr.title=this.queryObj.title;} 		this.setParm();this.init(); 	},computed:{numberOfPages(){return Math.ceil(this.d_items.length/this.itemsPerPage)},},methods: {		afterData(){app.ShowSnack('数据加载完成！')},	newItem2(){this.ShowAlert('温馨提示！', '不允许在此插入记录！')},		//规则：fun2,覆盖fun，fun0插入fun代码前	editItem(item){if(this.EditDialog){return 0 } 		if(typeof(eval(this.editItem2))=='function'){ this.editItem2(item) ; return 0 }				app.editItem(this,item);	this.EditDialog=true; 	}, //编辑				newItem(){ if(typeof(eval(this.newItem2))=='function'){this.newItem2(); return 0}	 			app.newItem(this); this.EditDialog=true;	this.editable=true;       		   if(typeof(eval(this.newInit))=='function'){this.newInit();}	 //执行初始化回调	},	moreItem(){ if(typeof(eval(this.moreItem2))=='function'){this.moreItem2(); return 0}	 			app.moreItem(this);       		  	},		deleteItem(item){ if(typeof(eval(this.deleteItem2))=='function'){this.deleteItem2(item); return 0}	 			app.deleteItem(this,item);this.EditDialog=false;},				saveData(){ if(typeof(eval(this.checkData))=='function'){if(this.checkData()!=1){return 0}}	 			if(typeof(eval(this.saveData2))=='function'){this.saveData2(); return 0}	 			app.saveData(this);}, //保存		close(){if(typeof(eval(this.close2))=='function'){this.close2(); return 0}	 			if(app.sysWin){app.sysWin=false;app.sysWinCom=''; return 0}			if(this.EditDialog){this.EditDialog = false; return 0}			app.DelTab()	},		//init2()>init0()+init() 	init(){ if(typeof(eval(this.init2))=='function'){this.init2(); return 0}			if(typeof(eval(this.init0))=='function'){this.init0();} 	//插入init0()			if(gv_db!=''){app.getData(this);}else{app.getTestData(this);}},//init				openTab(){if(this.parm_r.r_tab=='cm_richtext'){this.LoadVueParm(this.defaultItem.TopTab,this.defaultItem.TopRow,this.defaultItem.d_type,this.d_attr.title,'vt_richText_card') 		}else if(this.parm_r.r_tab=='cm_team'){    this.LoadVueParm(appSN,'0','1','虚拟团队','vt_team') }	 	    		}, //打开本栏目					LoadFolder(CurNode){//加载目录（文件夹）		this.clickedNode=CurNode;		this.defaultItem.topID=CurNode.id;		if(CurNode.id!=0){this.url_r='/common/data_r.asp?r_TopID='+CurNode.id; }//TopID下属检索 //修改app.ShowSnack('这是：'+ID);			else{this.url_r='/common/data_r.asp'; }		this.init();			if(CurNode.children.length){return 0} 	//已刷新				flowParm={page:1,rows:100, d_type:this.defaultItem.d_type,topID:CurNode.id};		axios.post('/common/data_folder.asp',qs.stringify(flowParm) ).then(response=>{			CurNode.childNum=response.data.rows.length;			for (var i=0; i < response.data.rows.length; i++)				{CurNode.children.push({id:response.data.rows[i].ID,name:response.data.rows[i].d_title,childNum:-1,children:[]});}						}).catch((err)=>{app.ShowAlert('warning','读取目录信息出错:',err); })	},			 	nextPage(){  if(this.page + 1 <= this.numberOfPages) this.page += 1},	formerPage(){if(this.page - 1 >= 1) this.page -= 1},	updateItemsPerPage(number) {		this.itemsPerPage = number },	haveAcc(myacc){return app.ACC.indexOf(myacc)>-1}, //是否具备某权限	LoadVue(s1,s2,s3,s4){app.LoadVue(s1,s2,s3,s4);},  //上级APP的函数重新封装	LoadVueACC(s1,s2,s3,s4,s5){app.LoadVueACC(s1,s2,s3,s4,s5);}, 		LoadVueParm(TopTab,TopRow,d_type,tabtitle,vueName,filename,parm){app.LoadVueParm(TopTab,TopRow,d_type,tabtitle,vueName,filename,parm)},	LoadVueMemID(TopTab,TopRow,tabtitle,vueName,filename,parm){app.LoadVueMemID(TopTab,TopRow,tabtitle,vueName,filename,parm)},	LoadVue2Win(t,vueName,filename,parm){app.LoadVue2Win(t,vueName,filename,parm)},		LoadVue2WinParm(TopTab,TopRow,d_type,t,vueName,filename,parm){app.LoadVue2WinParm(TopTab,TopRow,d_type,	t,vueName,filename,parm)},	OpenIfr(title,url){app.OpenIfr(title,url)},	MapByLatLng(title,lat,lng ){app.MapByLatLng(title,lat,lng )},		ShowJson(d){ShowJson(d)},		ShowAlert(Title,Msg,Type){if(Type){app.ShowAlert(Type,Title,Msg)}else{app.ShowAlert('warning',Title,Msg)}},	ShowSnack(Msg,color){app.ShowSnack(Msg,color)},	ObjClass(obj){alert(obj.constructor.name+'：'+obj.constructor)},	Asp2Arr(url,obj,fd){app.Asp2Arr(url,obj,fd)},		ExecFun(fun,p1,p2,p3){window[fun](p1,p2,p3);},//vue中执行window的函数			MyCall(telno,Title,Msg,calleeID){app.MyCall(telno,Title,Msg,calleeID)},//vue 封装	MyCallMulti(CalleeIDwx,CalleeIDdd,Title,Msg){app.MyCallMulti(CalleeIDwx,CalleeIDdd,Title,Msg)},	setTmpStr(item){app.tmpStr2=item.d_mem_name;	app.tmpStr3=item.d_title;	app.tmpStr1=item.d_mem;}, 	TmpStr(s1,s2,s3){app.tmpStr1=s1;	app.tmpStr2=s2;		app.tmpStr3=s3;}, 	SdkMeeting(Title,CalleeID,dtype,save){SdkMeeting(Title,CalleeID,dtype,save)},	SdkMeetingObj(obj){SdkMeetingObj(obj)},	SdkMsg(item){app.SdkMsg(item)},	SdkMsg2Uid(uid,uname,msg){app.SdkMsg2Uid(uid,uname,msg)},	MsgPost(obj){MsgPost(obj)},//发msg，在sdk-wx		sendDing(uids,title){sendDing(uids,title)},//发钉，在sdk-dd				ShowUserPos(id){ShowUserPos(id)},		selectUser(){selectUser(this.d_users)},// 分别在微信与钉钉sdk中	selectUserEx(){selectUserEx(this.d_usersEx)},//外部联系人			openUserProfile(uid){openUserProfile(uid)},	//微信打开profile	user4fd(fd){user4fd(this,fd)},	addr4fd(fd,latlng){app.addr4fd(this,fd,latlng)},		photo4fd(fd){photo4fd(this,fd)},	openPic(url){openPic(url)},	CallObj4Users(){app.tmpObj=this;	app.LoadVue2Win('选择用户','vt_CallObj')},// 分别在微信与钉钉sdk中,从群组中选择用户清单	postReadeded(tab,row,msg){app.postReadeded(tab,row,msg)},	postLog(msg1,msg2){app.postLog(msg1,msg2)},	VarRet(fd){return app[fd]},		 //initParm参数传给app临时变量,setParm临时变量传到Vue实例。	initParm(d_type){app.TopTab=this.parm_r.r_tab;	app.TopRow=this.editedItem.ID;		app.d_type=d_type;},	setParm(){this.defaultItem.TopTab=app.TopTab;	this.defaultItem.TopRow=app.TopRow;		this.defaultItem.d_type=app.d_type;		this.url_r ='/common/data_r.asp?TopTab='+app.TopTab+'&TopRow='+app.TopRow +'&d_type='+app.d_type;	//alert(this.url_r)		},	showColor(t){switch(t){ case 'Ⅰ级':case '红色':return 'error';				case 'Ⅱ级':case '橙色':return 'warning';							case 'Ⅲ级':case '黄色':return 'yellow darken-1'; 	case 'Ⅳ级':case '蓝色':return 'primary'; 	default:return 'green';}},	 }, }</script>